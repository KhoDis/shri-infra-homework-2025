name: Release

on:
  workflow_dispatch:

env:
  REGISTRY: cr.yandex/${{ secrets.YANDEX_REGISTRY_ID }}/app

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test

      - name: Set version and branch
        id: vars
        run: |
          VERSION=${{ github.run_number }}
          BRANCH="releases/$VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        run: |
          set -eux
          git checkout main
          git pull origin main

          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Previous tag: $PREV_TAG"

          echo -e "## v${{ steps.vars.outputs.version }} - $(date +'%Y-%m-%d')\n" > temp_changelog.md

          if [ -n "$PREV_TAG" ]; then
            git log "$PREV_TAG"..HEAD --pretty=format:"- %s" >> temp_changelog.md
          else
            git log --pretty=format:"- %s" >> temp_changelog.md
          fi

          echo -e "\n\n" >> temp_changelog.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> temp_changelog.md
          fi
          mv temp_changelog.md CHANGELOG.md

      - name: Commit updated changelog to temp branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b changelog/update-v${{ steps.vars.outputs.version }}
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for v${{ steps.vars.outputs.version }}"
          git push origin changelog/update-v${{ steps.vars.outputs.version }}

      - name: Create pull request to main with changelog
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update CHANGELOG for v${{ steps.vars.outputs.version }}"
          title: "chore: update CHANGELOG for v${{ steps.vars.outputs.version }}"
          body: "Автоматическое обновление CHANGELOG.md для релиза v${{ steps.vars.outputs.version }}"
          base: main
          branch: changelog/update-v${{ steps.vars.outputs.version }}

      - name: Create release branch
        run: |
          git checkout -b ${{ steps.vars.outputs.branch }}
          git push origin ${{ steps.vars.outputs.branch }}

      - name: Create GitHub Issue with release info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -eux
          git checkout main
          git pull origin main
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" "$PREV_TAG"..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s")
          fi
          BODY="## Релиз v${{ steps.vars.outputs.version }}\n\n**Дата**: $(date +'%Y-%m-%d')\n**Автор**: @${{ github.actor }}\n\n**Коммиты:**\n$COMMITS\n\n**Образы:**\n- ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }}\n- ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }}_latest"
          echo -e "$BODY" > body.md
          gh issue create --title "Релиз v${{ steps.vars.outputs.version }}" --body-file body.md

      - name: Auth to registry
        run: echo "${{ secrets.YANDEX_PASSWORD }}" | docker login -u "${{ secrets.YANDEX_USERNAME }}" --password-stdin cr.yandex

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }} .
          docker tag ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }} ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }}_latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }}
          docker push ${{ env.REGISTRY }}:${{ steps.vars.outputs.version }}_latest

      - name: Create Git tag
        run: |
          git checkout main
          git pull origin main
          git tag v${{ steps.vars.outputs.version }}
          git push origin v${{ steps.vars.outputs.version }}
